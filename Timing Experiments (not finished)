{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.5"
    },
    "toc": {
      "colors": {
        "hover_highlight": "#DAA520",
        "navigate_num": "#000000",
        "navigate_text": "#333333",
        "running_highlight": "#FF0000",
        "selected_highlight": "#FFD700",
        "sidebar_border": "#EEEEEE",
        "wrapper_background": "#FFFFFF"
      },
      "moveMenuLeft": true,
      "nav_menu": {
        "height": "264px",
        "width": "252px"
      },
      "navigate_menu": true,
      "number_sections": true,
      "sideBar": true,
      "threshold": 4,
      "toc_cell": false,
      "toc_section_display": "block",
      "toc_window_display": false,
      "widenNotebook": false
    },
    "colab": {
      "name": "Копия блокнота \"Копия блокнота \"NumpyNN (honor).ipynb\"\"",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/WhiteTeaDragon/SingularValues/blob/main/Timing%20Experiments%20(not%20finished)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fZYQj8S4yPoE"
      },
      "source": [
        "import numpy as np\r\n",
        "\r\n",
        "k = 3\r\n",
        "n = 16\r\n",
        "x_axis = sorted(set(np.around(np.logspace(0, 3, dtype=int))))"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PQc4eCH5yH6R"
      },
      "source": [
        "# strided_method from https://stackoverflow.com/questions/43735034/create-a-matrix-from-a-vector-where-each-row-is-a-shifted-version-of-the-vector\r\n",
        "def strided_method(ar):\r\n",
        "    a = np.concatenate((ar[1:], ar))\r\n",
        "    L = len(ar)\r\n",
        "    n = a.strides[0]\r\n",
        "    return np.lib.stride_tricks.as_strided(a[L-1:], (L,L), (-n,n)).copy()\r\n",
        "\r\n",
        "def strided_method_for_matrices(arr):\r\n",
        "    a = np.concatenate((arr[1:], arr))\r\n",
        "    L = len(arr)\r\n",
        "    n = a.strides[0]\r\n",
        "    return np.lib.stride_tricks.as_strided(a[L-1:], (L, L, *(arr[0].shape)), (-n,n, *(a.strides[1:])))\r\n",
        "\r\n",
        "def build_doubly_block_circ_matrix(k, n, kernel2d):\r\n",
        "    padded_kernel = np.pad(kernel2d, [(0, n - k), (0, n - k)], mode='constant')\r\n",
        "    arr = [0] * n\r\n",
        "    for i in range(n):\r\n",
        "        arr[i] = strided_method(padded_kernel[i])\r\n",
        "    return strided_method_for_matrices(arr).transpose(0, 2, 1, 3).reshape(-1, n**2)\r\n",
        "\r\n",
        "def build_matrix(k, n, m, kernel):\r\n",
        "    dbc_matrices = [[0] * m for i in range(m)]\r\n",
        "    for i in range(m):\r\n",
        "        for j in range(m):\r\n",
        "            dbc_matrices[i][j] = build_doubly_block_circ_matrix(k, n, kernel[:, :, i, j])\r\n",
        "    return np.block(dbc_matrices)"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "miXMrKmDyhfy"
      },
      "source": [
        "import time\r\n",
        "\r\n",
        "def test_singular_method(filename, x_axis, k, n, method,\r\n",
        "                         is_full_matr_needed=False):\r\n",
        "    file_timestamps = open(filename, \"w\")\r\n",
        "    file_timestamps.close()\r\n",
        "    timestamps_means = []\r\n",
        "    timestamps_vars = []\r\n",
        "    for m in x_axis:\r\n",
        "        print(\"Starting with\", m)\r\n",
        "        curr_times = []\r\n",
        "        for i in range(3):\r\n",
        "            kernel = np.random.standard_normal(size=(k, k, m, m))\r\n",
        "            if is_full_matr_needed:\r\n",
        "                matr = build_matrix(k, n, m, kernel)\r\n",
        "            else:\r\n",
        "                matr = None\r\n",
        "            start = time.time()\r\n",
        "            s = method(matr, kernel, n)\r\n",
        "            total = time.time() - start\r\n",
        "            curr_times.append(total)\r\n",
        "            if total >= 500:\r\n",
        "                break\r\n",
        "        curr_times = np.array(curr_times)\r\n",
        "        curr_mean = curr_times.mean()\r\n",
        "        curr_var = curr_times.var()\r\n",
        "        file_timestamps = open(filename, \"a\")\r\n",
        "        print(curr_mean, curr_var, file=file_timestamps)\r\n",
        "        file_timestamps.close()\r\n",
        "        timestamps_means.append(curr_mean)\r\n",
        "        timestamps_vars.append(curr_var)\r\n",
        "        print(\"Finishing with\", m)\r\n",
        "        print(\"Mean time\", timestamps_means[-1])\r\n",
        "        if total >= 500:\r\n",
        "            break\r\n",
        "    return timestamps_means, timestamps_vars"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qa79EWYs101J"
      },
      "source": [
        "def simple_method(matr, kernel, n):\r\n",
        "    return np.linalg.svd(matr, compute_uv=False)\r\n",
        "\r\n",
        "def numpy_method(matr, kernel, n):\r\n",
        "    transforms = np.fft.fft2(kernel, (n, n), axes=[0, 1])\r\n",
        "    return np.linalg.svd(transforms, compute_uv=False)"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tgrGpUgPCnWD",
        "outputId": "247ee20a-9fb2-4880-aa4f-bf8428c4eb5c"
      },
      "source": [
        "timestamps_means_numpy_bruteforce, timestamps_vars_numpy_bruteforce = test_singular_method(\r\n",
        "    \"bruteforce_mean_var.txt\", x_axis, k, n, simple_method, True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Starting with 1\n",
            "Finishing with 1\n",
            "Mean time 0.014531771341959635\n",
            "Starting with 2\n",
            "Finishing with 2\n",
            "Mean time 0.06328582763671875\n",
            "Starting with 3\n",
            "Finishing with 3\n",
            "Mean time 0.19745326042175293\n",
            "Starting with 4\n",
            "Finishing with 4\n",
            "Mean time 0.4291853904724121\n",
            "Starting with 5\n",
            "Finishing with 5\n",
            "Mean time 0.7718914349873861\n",
            "Starting with 6\n",
            "Finishing with 6\n",
            "Mean time 1.3097848892211914\n",
            "Starting with 7\n",
            "Finishing with 7\n",
            "Mean time 1.981634537378947\n",
            "Starting with 8\n",
            "Finishing with 8\n",
            "Mean time 2.8922599951426187\n",
            "Starting with 9\n",
            "Finishing with 9\n",
            "Mean time 4.055916945139567\n",
            "Starting with 10\n",
            "Finishing with 10\n",
            "Mean time 5.837780872980754\n",
            "Starting with 12\n",
            "Finishing with 12\n",
            "Mean time 10.652106444040934\n",
            "Starting with 14\n",
            "Finishing with 14\n",
            "Mean time 18.01745104789734\n",
            "Starting with 16\n",
            "Finishing with 16\n",
            "Mean time 30.438575903574627\n",
            "Starting with 19\n",
            "Finishing with 19\n",
            "Mean time 48.98483602205912\n",
            "Starting with 22\n",
            "Finishing with 22\n",
            "Mean time 80.01836347579956\n",
            "Starting with 25\n",
            "Finishing with 25\n",
            "Mean time 121.06005342801411\n",
            "Starting with 29\n",
            "Finishing with 29\n",
            "Mean time 190.15776300430298\n",
            "Starting with 33\n",
            "Finishing with 33\n",
            "Mean time 279.46053139368695\n",
            "Starting with 39\n",
            "Finishing with 39\n",
            "Mean time 468.47916475931805\n",
            "Starting with 44\n",
            "Finishing with 44\n",
            "Mean time 680.992867231369\n",
            "Starting with 51\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FExgVvMSy_lx",
        "outputId": "65e111f9-a68b-416e-8b58-33d38f83992a"
      },
      "source": [
        "timestamps_means_fft_numpy, timestamps_vars_fft_numpy = test_singular_method(\r\n",
        "    \"fft_numpy_mean_var.txt\", x_axis, k, n, numpy_method)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Starting with 1\n",
            "Finishing with 1\n",
            "Mean time 0.0024177233378092446\n",
            "Starting with 2\n",
            "Finishing with 2\n",
            "Mean time 0.0010921160380045574\n",
            "Starting with 3\n",
            "Finishing with 3\n",
            "Mean time 0.0012856324513753254\n",
            "Starting with 4\n",
            "Finishing with 4\n",
            "Mean time 0.0014664332071940105\n",
            "Starting with 5\n",
            "Finishing with 5\n",
            "Mean time 0.002059459686279297\n",
            "Starting with 6\n",
            "Finishing with 6\n",
            "Mean time 0.0027550061543782554\n",
            "Starting with 7\n",
            "Finishing with 7\n",
            "Mean time 0.003318309783935547\n",
            "Starting with 8\n",
            "Finishing with 8\n",
            "Mean time 0.004224697748819987\n",
            "Starting with 9\n",
            "Finishing with 9\n",
            "Mean time 0.004398266474405925\n",
            "Starting with 10\n",
            "Finishing with 10\n",
            "Mean time 0.00483854611714681\n",
            "Starting with 12\n",
            "Finishing with 12\n",
            "Mean time 0.006715218226114909\n",
            "Starting with 14\n",
            "Finishing with 14\n",
            "Mean time 0.008565107981363932\n",
            "Starting with 16\n",
            "Finishing with 16\n",
            "Mean time 0.010858933130900065\n",
            "Starting with 19\n",
            "Finishing with 19\n",
            "Mean time 0.016884644826253254\n",
            "Starting with 22\n",
            "Finishing with 22\n",
            "Mean time 0.01900633176167806\n",
            "Starting with 25\n",
            "Finishing with 25\n",
            "Mean time 0.023735761642456055\n",
            "Starting with 29\n",
            "Finishing with 29\n",
            "Mean time 0.03214263916015625\n",
            "Starting with 33\n",
            "Finishing with 33\n",
            "Mean time 0.04044667879740397\n",
            "Starting with 39\n",
            "Finishing with 39\n",
            "Mean time 0.05759835243225098\n",
            "Starting with 44\n",
            "Finishing with 44\n",
            "Mean time 0.07457582155863444\n",
            "Starting with 51\n",
            "Finishing with 51\n",
            "Mean time 0.10176992416381836\n",
            "Starting with 59\n",
            "Finishing with 59\n",
            "Mean time 0.14180882771809897\n",
            "Starting with 68\n",
            "Finishing with 68\n",
            "Mean time 0.2738180955251058\n",
            "Starting with 79\n",
            "Finishing with 79\n",
            "Mean time 0.37964916229248047\n",
            "Starting with 91\n",
            "Finishing with 91\n",
            "Mean time 0.5155521233876547\n",
            "Starting with 104\n",
            "Finishing with 104\n",
            "Mean time 0.6518809000651041\n",
            "Starting with 120\n",
            "Finishing with 120\n",
            "Mean time 0.8667136033376058\n",
            "Starting with 138\n",
            "Finishing with 138\n",
            "Mean time 1.2662047545115154\n",
            "Starting with 159\n",
            "Finishing with 159\n",
            "Mean time 1.6909266312917073\n",
            "Starting with 184\n",
            "Finishing with 184\n",
            "Mean time 2.3344990412394204\n",
            "Starting with 212\n",
            "Finishing with 212\n",
            "Mean time 3.356280247370402\n",
            "Starting with 244\n",
            "Finishing with 244\n",
            "Mean time 4.348782459894816\n",
            "Starting with 281\n",
            "Finishing with 281\n",
            "Mean time 6.535493691762288\n",
            "Starting with 323\n",
            "Finishing with 323\n",
            "Mean time 9.605699141820272\n",
            "Starting with 372\n",
            "Finishing with 372\n",
            "Mean time 14.915140946706137\n",
            "Starting with 429\n",
            "Finishing with 429\n",
            "Mean time 21.315268913904827\n",
            "Starting with 494\n",
            "Finishing with 494\n",
            "Mean time 31.07665793100993\n",
            "Starting with 568\n",
            "Finishing with 568\n",
            "Mean time 45.291912158330284\n",
            "Starting with 655\n",
            "Finishing with 655\n",
            "Mean time 64.47868347167969\n",
            "Starting with 754\n",
            "Finishing with 754\n",
            "Mean time 94.6009464263916\n",
            "Starting with 868\n",
            "Finishing with 868\n",
            "Mean time 205.32367777824402\n",
            "Starting with 1000\n",
            "Finishing with 1000\n",
            "Mean time 394.2927459081014\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JmQ9ImDyx_lc"
      },
      "source": [
        "### Your very own neural network\n",
        "\n",
        "In this notebook we're going to build a neural network using naught but pure numpy and steel nerves. It's going to be fun, I promise!\n",
        "\n",
        "<img src=\"https://github.com/hse-aml/intro-to-dl/blob/master/week2/frankenstein.png?raw=1\" style=\"width:20%\">"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ysOF5Ehgx_ls"
      },
      "source": [
        "import sys\n",
        "sys.path.append(\"..\")\n",
        "import tqdm_utils\n",
        "import download_utils"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2ACpi21ix_lx"
      },
      "source": [
        "# use the preloaded keras datasets and models\n",
        "download_utils.link_all_keras_resources()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XdNEPBzXx_l9"
      },
      "source": [
        "from __future__ import print_function\n",
        "import numpy as np\n",
        "np.random.seed(42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3KJtB2cUx_l_"
      },
      "source": [
        "Here goes our main class: a layer that can do .forward() and .backward() passes."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "2KgpxrwDx_mQ"
      },
      "source": [
        "class Layer:\n",
        "    \"\"\"\n",
        "    A building block. Each layer is capable of performing two things:\n",
        "    \n",
        "    - Process input to get output:           output = layer.forward(input)\n",
        "    \n",
        "    - Propagate gradients through itself:    grad_input = layer.backward(input, grad_output)\n",
        "    \n",
        "    Some layers also have learnable parameters which they update during layer.backward.\n",
        "    \"\"\"\n",
        "    def __init__(self):\n",
        "        \"\"\"Here you can initialize layer parameters (if any) and auxiliary stuff.\"\"\"\n",
        "        # A dummy layer does nothing\n",
        "        pass\n",
        "    \n",
        "    def forward(self, input):\n",
        "        \"\"\"\n",
        "        Takes input data of shape [batch, input_units], returns output data [batch, output_units]\n",
        "        \"\"\"\n",
        "        # A dummy layer just returns whatever it gets as input.\n",
        "        return input\n",
        "\n",
        "    def backward(self, input, grad_output):\n",
        "        \"\"\"\n",
        "        Performs a backpropagation step through the layer, with respect to the given input.\n",
        "        \n",
        "        To compute loss gradients w.r.t input, you need to apply chain rule (backprop):\n",
        "        \n",
        "        d loss / d x  = (d loss / d layer) * (d layer / d x)\n",
        "        \n",
        "        Luckily, you already receive d loss / d layer as input, so you only need to multiply it by d layer / d x.\n",
        "        \n",
        "        If your layer has parameters (e.g. dense layer), you also need to update them here using d loss / d layer\n",
        "        \"\"\"\n",
        "        # The gradient of a dummy layer is precisely grad_output, but we'll write it more explicitly\n",
        "        num_units = input.shape[1]\n",
        "        \n",
        "        d_layer_d_input = np.eye(num_units)\n",
        "        \n",
        "        return np.dot(grad_output, d_layer_d_input) # chain rule"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oBiEj68ox_mb"
      },
      "source": [
        "### The road ahead\n",
        "\n",
        "We're going to build a neural network that classifies MNIST digits. To do so, we'll need a few building blocks:\n",
        "- Dense layer - a fully-connected layer, $f(X)=W \\cdot X + \\vec{b}$\n",
        "- ReLU layer (or any other nonlinearity you want)\n",
        "- Loss function - crossentropy\n",
        "- Backprop algorithm - a stochastic gradient descent with backpropageted gradients\n",
        "\n",
        "Let's approach them one at a time.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j9X2JTMox_mb"
      },
      "source": [
        "### Nonlinearity layer\n",
        "\n",
        "This is the simplest layer you can get: it simply applies a nonlinearity to each element of your network."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "nZ3F37Y9x_me"
      },
      "source": [
        "class ReLU(Layer):\n",
        "    def __init__(self):\n",
        "        \"\"\"ReLU layer simply applies elementwise rectified linear unit to all inputs\"\"\"\n",
        "        pass\n",
        "    \n",
        "    def forward(self, input):\n",
        "        \"\"\"Apply elementwise ReLU to [batch, input_units] matrix\"\"\"\n",
        "        return np.maximum(0, input)\n",
        "    \n",
        "    def backward(self, input, grad_output):\n",
        "        \"\"\"Compute gradient of loss w.r.t. ReLU input\"\"\"\n",
        "        relu_grad = input > 0\n",
        "        return grad_output*relu_grad        "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "vOkkFE0ox_me"
      },
      "source": [
        "# some tests\n",
        "from util import eval_numerical_gradient\n",
        "x = np.linspace(-1,1,10*32).reshape([10,32])\n",
        "l = ReLU()\n",
        "grads = l.backward(x,np.ones([10,32])/(32*10))\n",
        "numeric_grads = eval_numerical_gradient(lambda x: l.forward(x).mean(), x=x)\n",
        "assert np.allclose(grads, numeric_grads, rtol=1e-3, atol=0),\\\n",
        "    \"gradient returned by your layer does not match the numerically computed gradient\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BEiU5Yeux_mi"
      },
      "source": [
        "#### Instant primer: lambda functions\n",
        "\n",
        "In python, you can define functions in one line using the `lambda` syntax: `lambda param1, param2: expression`\n",
        "\n",
        "For example: `f = lambda x, y: x+y` is equivalent to a normal function:\n",
        "\n",
        "```\n",
        "def f(x,y):\n",
        "    return x+y\n",
        "```\n",
        "For more information, click [here](http://www.secnetix.de/olli/Python/lambda_functions.hawk).    "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LI5q8rbYx_mp"
      },
      "source": [
        "### Dense layer\n",
        "\n",
        "Now let's build something more complicated. Unlike nonlinearity, a dense layer actually has something to learn.\n",
        "\n",
        "A dense layer applies affine transformation. In a vectorized form, it can be described as:\n",
        "$$f(X)= W \\cdot X + \\vec b $$\n",
        "\n",
        "Where \n",
        "* X is an object-feature matrix of shape [batch_size, num_features],\n",
        "* W is a weight matrix [num_features, num_outputs] \n",
        "* and b is a vector of num_outputs biases.\n",
        "\n",
        "Both W and b are initialized during layer creation and updated each time backward is called."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "nYnqg31Nx_mq"
      },
      "source": [
        "class Dense(Layer):\n",
        "    def __init__(self, input_units, output_units, learning_rate=0.1, xavier=False):\n",
        "        \"\"\"\n",
        "        A dense layer is a layer which performs a learned affine transformation:\n",
        "        f(x) = <W*x> + b\n",
        "        \"\"\"\n",
        "        self.learning_rate = learning_rate\n",
        "        \n",
        "        # initialize weights with small random numbers. We use normal initialization, \n",
        "        # but surely there is something better. Try this once you got it working: http://bit.ly/2vTlmaJ\n",
        "        if xavier:\n",
        "            self.weights = np.random.randn(input_units, output_units)*np.sqrt(2 / (input_units + output_units))\n",
        "        else:\n",
        "            self.weights = np.random.randn(input_units, output_units)*0.01\n",
        "        self.biases = np.zeros(output_units)\n",
        "        \n",
        "    def forward(self,input):\n",
        "        \"\"\"\n",
        "        Perform an affine transformation:\n",
        "        f(x) = <W*x> + b\n",
        "        \n",
        "        input shape: [batch, input_units]\n",
        "        output shape: [batch, output units]\n",
        "        \"\"\"\n",
        "        return input @ self.weights + self.biases\n",
        "    \n",
        "    def backward(self,input,grad_output):\n",
        "        \n",
        "        # compute d f / d x = d f / d dense * d dense / d x\n",
        "        # where d dense/ d x = weights transposed\n",
        "        grad_input = grad_output @ self.weights.T\n",
        "        \n",
        "        # compute gradient w.r.t. weights and biases\n",
        "        grad_weights = input.T @ grad_output\n",
        "        grad_biases = np.sum(grad_output, axis=0)\n",
        "        \n",
        "        assert grad_weights.shape == self.weights.shape and grad_biases.shape == self.biases.shape\n",
        "        # Here we perform a stochastic gradient descent step. \n",
        "        # Later on, you can try replacing that with something better.\n",
        "        self.weights = self.weights - self.learning_rate * grad_weights\n",
        "        self.biases = self.biases - self.learning_rate * grad_biases\n",
        "        \n",
        "        return grad_input"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6jir_mVcx_mt"
      },
      "source": [
        "### Testing the dense layer\n",
        "\n",
        "Here we have a few tests to make sure your dense layer works properly. You can just run them, get 3 \"well done\"s and forget they ever existed.\n",
        "\n",
        "... or not get 3 \"well done\"s and go fix stuff. If that is the case, here are some tips for you:\n",
        "* Make sure you compute gradients for W and b as __sum of gradients over batch__, not mean over gradients. Grad_output is already divided by batch size.\n",
        "* If you're debugging, try saving gradients in class fields, like \"self.grad_w = grad_w\" or print first 3-5 weights. This helps debugging.\n",
        "* If nothing else helps, try ignoring tests and proceed to network training. If it trains alright, you may be off by something that does not affect network training."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l8Vqtju-x_mv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10640498-78d7-42ba-8201-5d6bb5892a77"
      },
      "source": [
        "l = Dense(128, 150)\n",
        "\n",
        "assert -0.05 < l.weights.mean() < 0.05 and 1e-3 < l.weights.std() < 1e-1,\\\n",
        "    \"The initial weights must have zero mean and small variance. \"\\\n",
        "    \"If you know what you're doing, remove this assertion.\"\n",
        "assert -0.05 < l.biases.mean() < 0.05, \"Biases must be zero mean. Ignore if you have a reason to do otherwise.\"\n",
        "\n",
        "# To test the outputs, we explicitly set weights with fixed values. DO NOT DO THAT IN ACTUAL NETWORK!\n",
        "l = Dense(3,4)\n",
        "\n",
        "x = np.linspace(-1,1,2*3).reshape([2,3])\n",
        "l.weights = np.linspace(-1,1,3*4).reshape([3,4])\n",
        "l.biases = np.linspace(-1,1,4)\n",
        "\n",
        "assert np.allclose(l.forward(x),np.array([[ 0.07272727,  0.41212121,  0.75151515,  1.09090909],\n",
        "                                          [-0.90909091,  0.08484848,  1.07878788,  2.07272727]]))\n",
        "print(\"Well done!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Well done!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "beAuL8Qrx_m0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e658384c-10f4-4f58-c905-7c07b4f0edbe"
      },
      "source": [
        "# To test the grads, we use gradients obtained via finite differences\n",
        "\n",
        "from util import eval_numerical_gradient\n",
        "\n",
        "x = np.linspace(-1,1,10*32).reshape([10,32])\n",
        "l = Dense(32,64,learning_rate=0)\n",
        "\n",
        "numeric_grads = eval_numerical_gradient(lambda x: l.forward(x).sum(),x)\n",
        "grads = l.backward(x,np.ones([10,64]))\n",
        "\n",
        "assert np.allclose(grads,numeric_grads,rtol=1e-3,atol=0), \"input gradient does not match numeric grad\"\n",
        "print(\"Well done!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Well done!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "A31yMl7kx_m3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0e9ec4d2-03da-43e7-e2e7-63eb240092e1"
      },
      "source": [
        "#test gradients w.r.t. params\n",
        "def compute_out_given_wb(w,b):\n",
        "    l = Dense(32,64,learning_rate=1)\n",
        "    l.weights = np.array(w)\n",
        "    l.biases = np.array(b)\n",
        "    x = np.linspace(-1,1,10*32).reshape([10,32])\n",
        "    return l.forward(x)\n",
        "    \n",
        "def compute_grad_by_params(w,b):\n",
        "    l = Dense(32,64,learning_rate=1)\n",
        "    l.weights = np.array(w)\n",
        "    l.biases = np.array(b)\n",
        "    x = np.linspace(-1,1,10*32).reshape([10,32])\n",
        "    l.backward(x,np.ones([10,64]) / 10.)\n",
        "    return w - l.weights, b - l.biases\n",
        "    \n",
        "w,b = np.random.randn(32,64), np.linspace(-1,1,64)\n",
        "\n",
        "numeric_dw = eval_numerical_gradient(lambda w: compute_out_given_wb(w,b).mean(0).sum(),w )\n",
        "numeric_db = eval_numerical_gradient(lambda b: compute_out_given_wb(w,b).mean(0).sum(),b )\n",
        "grad_w,grad_b = compute_grad_by_params(w,b)\n",
        "\n",
        "assert np.allclose(numeric_dw,grad_w,rtol=1e-3,atol=0), \"weight gradient does not match numeric weight gradient\"\n",
        "assert np.allclose(numeric_db,grad_b,rtol=1e-3,atol=0), \"weight gradient does not match numeric weight gradient\"\n",
        "print(\"Well done!\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Well done!\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xbXT2USMx_m6"
      },
      "source": [
        "### The loss function\n",
        "\n",
        "Since we want to predict probabilities, it would be logical for us to define softmax nonlinearity on top of our network and compute loss given predicted probabilities. However, there is a better way to do so.\n",
        "\n",
        "If you write down the expression for crossentropy as a function of softmax logits (a), you'll see:\n",
        "\n",
        "$$ loss = - log \\space {e^{a_{correct}} \\over {\\underset i \\sum e^{a_i} } } $$\n",
        "\n",
        "If you take a closer look, ya'll see that it can be rewritten as:\n",
        "\n",
        "$$ loss = - a_{correct} + log {\\underset i \\sum e^{a_i} } $$\n",
        "\n",
        "It's called Log-softmax and it's better than naive log(softmax(a)) in all aspects:\n",
        "* Better numerical stability\n",
        "* Easier to get derivative right\n",
        "* Marginally faster to compute\n",
        "\n",
        "So why not just use log-softmax throughout our computation and never actually bother to estimate probabilities.\n",
        "\n",
        "Here you are! We've defined the both loss functions for you so that you could focus on neural network part."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "cIWKTn7Zx_m7"
      },
      "source": [
        "def softmax_crossentropy_with_logits(logits,reference_answers):\n",
        "    \"\"\"Compute crossentropy from logits[batch,n_classes] and ids of correct answers\"\"\"\n",
        "    logits_for_answers = logits[np.arange(len(logits)),reference_answers]\n",
        "    \n",
        "    xentropy = - logits_for_answers + np.log(np.sum(np.exp(logits),axis=-1))\n",
        "    \n",
        "    return xentropy\n",
        "\n",
        "def grad_softmax_crossentropy_with_logits(logits,reference_answers):\n",
        "    \"\"\"Compute crossentropy gradient from logits[batch,n_classes] and ids of correct answers\"\"\"\n",
        "    ones_for_answers = np.zeros_like(logits)\n",
        "    ones_for_answers[np.arange(len(logits)),reference_answers] = 1\n",
        "    \n",
        "    softmax = np.exp(logits) / np.exp(logits).sum(axis=-1,keepdims=True)\n",
        "    \n",
        "    return (- ones_for_answers + softmax) / logits.shape[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "ppKbKa8mx_m8"
      },
      "source": [
        "logits = np.linspace(-1,1,500).reshape([50,10])\n",
        "answers = np.arange(50)%10\n",
        "\n",
        "softmax_crossentropy_with_logits(logits,answers)\n",
        "grads = grad_softmax_crossentropy_with_logits(logits,answers)\n",
        "numeric_grads = eval_numerical_gradient(lambda l: softmax_crossentropy_with_logits(l,answers).mean(),logits)\n",
        "\n",
        "assert np.allclose(numeric_grads,grads,rtol=1e-3,atol=0), \"The reference implementation has just failed. Someone has just changed the rules of math.\""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E3xC0GIBx_m-"
      },
      "source": [
        "### Full network\n",
        "\n",
        "Now let's combine what we've just built into a working neural network. As we announced, we're gonna use this monster to classify handwritten digits, so let's get them loaded."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mQhgOpFsx_m-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "outputId": "d4e208df-f7ec-44be-bcb1-0b7a3eb4db46"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "\n",
        "from preprocessed_mnist import load_dataset\n",
        "X_train, y_train, X_val, y_val, X_test, y_test = load_dataset(flatten=True)\n",
        "\n",
        "plt.figure(figsize=[6,6])\n",
        "for i in range(4):\n",
        "    plt.subplot(2,2,i+1)\n",
        "    plt.title(\"Label: %i\"%y_train[i])\n",
        "    plt.imshow(X_train[i].reshape([28,28]),cmap='gray');"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x432 with 4 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9pz7uUfxx_m_"
      },
      "source": [
        "We'll define network as a list of layers, each applied on top of previous one. In this setting, computing predictions and training becomes trivial."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "jOWIWvnNx_nB"
      },
      "source": [
        "network = []\n",
        "network.append(Dense(X_train.shape[1],100))\n",
        "network.append(ReLU())\n",
        "network.append(Dense(100,200))\n",
        "network.append(ReLU())\n",
        "network.append(Dense(200,10))\n",
        "\n",
        "def forward(network, X):\n",
        "    \"\"\"\n",
        "    Compute activations of all network layers by applying them sequentially.\n",
        "    Return a list of activations for each layer. \n",
        "    Make sure last activation corresponds to network logits.\n",
        "    \"\"\"\n",
        "    activations = []\n",
        "    input = X\n",
        "    if len(network) > 0:\n",
        "        activations.append(network[0].forward(input))\n",
        "    for i in range(1, len(network)):\n",
        "        activations.append(network[i].forward(activations[i - 1]))\n",
        "    assert len(activations) == len(network)\n",
        "    return activations\n",
        "\n",
        "def predict(network,X):\n",
        "    \"\"\"\n",
        "    Compute network predictions.\n",
        "    \"\"\"\n",
        "    logits = forward(network,X)[-1]\n",
        "    return logits.argmax(axis=-1)\n",
        "\n",
        "def train(network,X,y):\n",
        "    \"\"\"\n",
        "    Train your network on a given batch of X and y.\n",
        "    You first need to run forward to get all layer activations.\n",
        "    Then you can run layer.backward going from last to first layer.\n",
        "    \n",
        "    After you called backward for all layers, all Dense layers have already made one gradient step.\n",
        "    \"\"\"\n",
        "    \n",
        "    # Get the layer activations\n",
        "    layer_activations = forward(network,X)\n",
        "    layer_inputs = [X]+layer_activations  #layer_inputs[i] is an input for network[i]\n",
        "    logits = layer_activations[-1]\n",
        "\n",
        "    # Compute the loss and the initial gradient\n",
        "    loss = softmax_crossentropy_with_logits(logits,y)\n",
        "    loss_grad = grad_softmax_crossentropy_with_logits(logits,y)\n",
        "    \n",
        "    for i in range(len(network) - 1, -1, -1):\n",
        "        loss_grad = network[i].backward(layer_inputs[i], loss_grad)\n",
        "        \n",
        "    return np.mean(loss)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IsgctGcFx_nC"
      },
      "source": [
        "Instead of tests, we provide you with a training loop that prints training and validation accuracies on every epoch.\n",
        "\n",
        "If your implementation of forward and backward are correct, your accuracy should grow from 90~93% to >97% with the default network."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OO1Yc9qax_nD"
      },
      "source": [
        "### Training loop\n",
        "\n",
        "As usual, we split data into minibatches, feed each such minibatch into the network and update weights."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "kXluVe7gx_nE"
      },
      "source": [
        "def iterate_minibatches(inputs, targets, batchsize, shuffle=False):\n",
        "    assert len(inputs) == len(targets)\n",
        "    if shuffle:\n",
        "        indices = np.random.permutation(len(inputs))\n",
        "    for start_idx in tqdm_utils.tqdm_notebook_failsafe(range(0, len(inputs) - batchsize + 1, batchsize)):\n",
        "        if shuffle:\n",
        "            excerpt = indices[start_idx:start_idx + batchsize]\n",
        "        else:\n",
        "            excerpt = slice(start_idx, start_idx + batchsize)\n",
        "        yield inputs[excerpt], targets[excerpt]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "yKAwtr0Px_nE"
      },
      "source": [
        "from IPython.display import clear_output\n",
        "train_log = []\n",
        "val_log = []"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "ufxwQAVox_nE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "outputId": "782042e0-090a-4f13-c211-f2bf2abd8e61"
      },
      "source": [
        "for epoch in range(25):\n",
        "\n",
        "    for x_batch,y_batch in iterate_minibatches(X_train,y_train,batchsize=32,shuffle=True):\n",
        "        train(network,x_batch,y_batch)\n",
        "    \n",
        "    train_log.append(np.mean(predict(network,X_train)==y_train))\n",
        "    val_log.append(np.mean(predict(network,X_val)==y_val))\n",
        "    \n",
        "    clear_output()\n",
        "    print(\"Epoch\",epoch)\n",
        "    print(\"Train accuracy:\",train_log[-1])\n",
        "    print(\"Val accuracy:\",val_log[-1])\n",
        "    plt.plot(train_log,label='train accuracy')\n",
        "    plt.plot(val_log,label='val accuracy')\n",
        "    plt.legend(loc='best')\n",
        "    plt.grid()\n",
        "    plt.show()\n",
        "    "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 24\n",
            "Train accuracy: 1.0\n",
            "Val accuracy: 0.9798\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g6MwDKIqx_nF"
      },
      "source": [
        "### Peer-reviewed assignment\n",
        "\n",
        "Congradulations, you managed to get this far! There is just one quest left undone, and this time you'll get to choose what to do.\n",
        "\n",
        "\n",
        "#### Option I: initialization\n",
        "* Implement Dense layer with Xavier initialization as explained [here](http://bit.ly/2vTlmaJ)\n",
        "\n",
        "To pass this assignment, you must conduct an experiment showing how xavier initialization compares to default initialization on deep networks (5+ layers).\n",
        "\n",
        "\n",
        "#### Option II: regularization\n",
        "* Implement a version of Dense layer with L2 regularization penalty: when updating Dense Layer weights, adjust gradients to minimize\n",
        "\n",
        "$$ Loss = Crossentropy + \\alpha \\cdot \\underset i \\sum {w_i}^2 $$\n",
        "\n",
        "To pass this assignment, you must conduct an experiment showing if regularization mitigates overfitting in case of abundantly large number of neurons. Consider tuning $\\alpha$ for better results.\n",
        "\n",
        "#### Option III: optimization\n",
        "* Implement a version of Dense layer that uses momentum/rmsprop or whatever method worked best for you last time.\n",
        "\n",
        "Most of those methods require persistent parameters like momentum direction or moving average grad norm, but you can easily store those params inside your layers.\n",
        "\n",
        "To pass this assignment, you must conduct an experiment showing how your chosen method performs compared to vanilla SGD.\n",
        "\n",
        "### General remarks\n",
        "_Please read the peer-review guidelines before starting this part of the assignment._\n",
        "\n",
        "In short, a good solution is one that:\n",
        "* is based on this notebook\n",
        "* runs in the default course environment with Run All\n",
        "* its code doesn't cause spontaneous eye bleeding\n",
        "* its report is easy to read.\n",
        "\n",
        "_Formally we can't ban you from writing boring reports, but if you bored your reviewer to death, there's noone left alive to give you the grade you want._\n",
        "\n",
        "\n",
        "### Bonus assignments\n",
        "\n",
        "As a bonus assignment (no points, just swag), consider implementing Batch Normalization ([guide](https://gab41.lab41.org/batch-normalization-what-the-hey-d480039a9e3b)) or Dropout ([guide](https://medium.com/@amarbudhiraja/https-medium-com-amarbudhiraja-learning-less-to-learn-better-dropout-in-deep-machine-learning-74334da4bfc5)). Note, however, that those \"layers\" behave differently when training and when predicting on test set.\n",
        "\n",
        "* Dropout:\n",
        "  * During training: drop units randomly with probability __p__ and multiply everything by __1/(1-p)__\n",
        "  * During final predicton: do nothing; pretend there's no dropout\n",
        "  \n",
        "* Batch normalization\n",
        "  * During training, it substracts mean-over-batch and divides by std-over-batch and updates mean and variance.\n",
        "  * During final prediction, it uses accumulated mean and variance.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "U6EkhPjVv3PA"
      },
      "source": [
        "#### Option I: initialization"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FUgPuK_v2vc_"
      },
      "source": [
        "# for plotting\r\n",
        "import pandas as pd\r\n",
        "import seaborn as sns"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k6X4V6FFxJ4_"
      },
      "source": [
        "iters = 5\r\n",
        "epochs = 25\r\n",
        "df_train_log = pd.DataFrame(columns=['epoch', 'accuracy'])\r\n",
        "df_val_log = pd.DataFrame(columns=['epoch', 'accuracy'])\r\n",
        "for i in range(iters):\r\n",
        "    network_Xavier = []\r\n",
        "    network_Xavier.append(Dense(X_train.shape[1],100, xavier=True))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(100,200, xavier=True))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(200,300, xavier=True))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(300,300, xavier=True))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(300,10))\r\n",
        "    for epoch in range(25):\r\n",
        "\r\n",
        "        for x_batch,y_batch in iterate_minibatches(X_train,y_train,batchsize=32,shuffle=True):\r\n",
        "            train(network_Xavier,x_batch,y_batch)\r\n",
        "        \r\n",
        "        df_train_log.loc[i * epochs + epoch] = [epoch, np.mean(predict(network_Xavier,X_train)==y_train)]\r\n",
        "        df_val_log.loc[i * epochs + epoch] = [epoch, np.mean(predict(network_Xavier,X_val)==y_val)]\r\n",
        "        print(i, epoch)\r\n",
        "    clear_output()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hlfQzv1d0U0m"
      },
      "source": [
        "iters = 5\r\n",
        "epochs = 25\r\n",
        "df_train_log_without = pd.DataFrame(columns=['epoch', 'accuracy'])\r\n",
        "df_val_log_without = pd.DataFrame(columns=['epoch', 'accuracy'])\r\n",
        "for i in range(iters):\r\n",
        "    network_Xavier = []\r\n",
        "    network_Xavier.append(Dense(X_train.shape[1],100))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(100,200))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(200,300))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(300,300))\r\n",
        "    network_Xavier.append(ReLU())\r\n",
        "    network_Xavier.append(Dense(300,10))\r\n",
        "    for epoch in range(25):\r\n",
        "\r\n",
        "        for x_batch,y_batch in iterate_minibatches(X_train,y_train,batchsize=32,shuffle=True):\r\n",
        "            train(network_Xavier,x_batch,y_batch)\r\n",
        "        \r\n",
        "        df_train_log_without.loc[i * epochs + epoch] = [epoch, np.mean(predict(network_Xavier,X_train)==y_train)]\r\n",
        "        df_val_log_without.loc[i * epochs + epoch] = [epoch, np.mean(predict(network_Xavier,X_val)==y_val)]\r\n",
        "        print(i, epoch)\r\n",
        "    clear_output()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "FyeWlT77H1kt",
        "outputId": "e812d0c3-67a4-4a22-ecc1-28af13609028"
      },
      "source": [
        "sns.set_style(\"darkgrid\")\r\n",
        "fig, (ax1, ax2) = plt.subplots(1,2, figsize = (20, 6), sharey=True)\r\n",
        "fig.suptitle(\"Train and validation accuracy\")\r\n",
        "sns.lineplot(data=df_train_log, x=\"epoch\", y=\"accuracy\", color=\"r\", ax=ax1)\r\n",
        "sns.lineplot(data=df_val_log, x=\"epoch\", y=\"accuracy\", color=\"g\", ax=ax1)\r\n",
        "sns.lineplot(data=df_train_log_without, x=\"epoch\", y=\"accuracy\", color=\"r\", ax=ax2)\r\n",
        "sns.lineplot(data=df_val_log_without, x=\"epoch\", y=\"accuracy\", color=\"g\", ax=ax2)\r\n",
        "ax1.legend(labels=['train','val'], facecolor='white')\r\n",
        "ax1.set_title(\"With Xavier intialization\")\r\n",
        "_ = ax2.set_title(\"Without Xavier intialization\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 431
        },
        "id": "U6lgn5N-Lps_",
        "outputId": "98442cce-ab0d-4991-f7bf-d094e0a4303a"
      },
      "source": [
        "sns.set_style(\"darkgrid\")\r\n",
        "fig, (ax1, ax2) = plt.subplots(1,2, figsize = (20, 6), sharey=True)\r\n",
        "fig.suptitle(\"Train and validation accuracy\")\r\n",
        "g = sns.lineplot(data=df_train_log, x=\"epoch\", y=\"accuracy\", color=\"r\", ax=ax1)\r\n",
        "g.set(xlim=(7, None), ylim=(0.96, None))\r\n",
        "sns.lineplot(data=df_val_log, x=\"epoch\", y=\"accuracy\", color=\"g\", ax=ax1)\r\n",
        "g = sns.lineplot(data=df_train_log_without, x=\"epoch\", y=\"accuracy\", color=\"r\", ax=ax2)\r\n",
        "sns.lineplot(data=df_val_log_without, x=\"epoch\", y=\"accuracy\", color=\"g\", ax=ax2)\r\n",
        "g.set(xlim=(7, None), ylim=(0.96, None))\r\n",
        "ax1.legend(labels=['train','val'], facecolor='white')\r\n",
        "ax1.set_title(\"With Xavier intialization\")\r\n",
        "_ = ax2.set_title(\"Without Xavier intialization\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AmDkRVvuMho-"
      },
      "source": [
        "It can be seen from the graphs that deep neural networks without Xavier initialization start with a very low accuracy because of the wrong initial parameters. Because of this networks without Xavier need more epochs for converging to the best possible accuracy. In our case the difference is roughly 7 epochs and the final accuracy is lower by roughly 0.008. "
      ]
    }
  ]
}